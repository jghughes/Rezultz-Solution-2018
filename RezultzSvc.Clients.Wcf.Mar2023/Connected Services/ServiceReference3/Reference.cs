//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference3
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
    public partial class JghFault : object
    {
        
        private string NarrativeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Narrative
        {
            get
            {
                return this.NarrativeField;
            }
            set
            {
                this.NarrativeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:wsdlnamespace.RezultzSvc.WebApp01", ConfigurationName="ServiceReference3.ILeaderboardResultsSvc")]
    public interface ILeaderboardResultsSvc
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetIfServiceIsAnswer" +
            "ing", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetIfServiceIsAnswer" +
            "ingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetIfServiceIsAnswer" +
            "ingJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> GetIfServiceIsAnsweringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetServiceEndpointsI" +
            "nfo", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetServiceEndpointsI" +
            "nfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetServiceEndpointsI" +
            "nfoJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<string[]> GetServiceEndpointsInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetIfFileNameOfSeaso" +
            "nProfileIsRecognised", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetIfFileNameOfSeaso" +
            "nProfileIsRecognisedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetIfFileNameOfSeaso" +
            "nProfileIsRecognisedJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> GetIfFileNameOfSeasonProfileIsRecognisedAsync(string profileFileNameFragment);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetSeasonProfile", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetSeasonProfileResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetSeasonProfileJghF" +
            "aultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<byte[]> GetSeasonProfileAsync(string profileFileNameFragment);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetAllSeasonProfiles" +
            "", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetAllSeasonProfiles" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/GetAllSeasonProfiles" +
            "JghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<byte[]> GetAllSeasonProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/PopulateSingleEventW" +
            "ithResults", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/PopulateSingleEventW" +
            "ithResultsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/PopulateSingleEventW" +
            "ithResultsJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<byte[]> PopulateSingleEventWithResultsAsync(byte[] eventItemAsJsonAsCompressedBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/PopulateAllEventsInS" +
            "ingleSeriesWithAllResults", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/PopulateAllEventsInS" +
            "ingleSeriesWithAllResultsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference3.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/ILeaderboardResultsSvc/PopulateAllEventsInS" +
            "ingleSeriesWithAllResultsJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<byte[]> PopulateAllEventsInSingleSeriesWithAllResultsAsync(byte[] seriesItemAsJsonAsCompressedBytes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ILeaderboardResultsSvcChannel : ServiceReference3.ILeaderboardResultsSvc, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class LeaderboardResultsSvcClient : System.ServiceModel.ClientBase<ServiceReference3.ILeaderboardResultsSvc>, ServiceReference3.ILeaderboardResultsSvc
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LeaderboardResultsSvcClient(EndpointConfiguration endpointConfiguration) : 
                base(LeaderboardResultsSvcClient.GetBindingForEndpoint(endpointConfiguration), LeaderboardResultsSvcClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LeaderboardResultsSvcClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(LeaderboardResultsSvcClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LeaderboardResultsSvcClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(LeaderboardResultsSvcClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LeaderboardResultsSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> GetIfServiceIsAnsweringAsync()
        {
            return base.Channel.GetIfServiceIsAnsweringAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetServiceEndpointsInfoAsync()
        {
            return base.Channel.GetServiceEndpointsInfoAsync();
        }
        
        public System.Threading.Tasks.Task<bool> GetIfFileNameOfSeasonProfileIsRecognisedAsync(string profileFileNameFragment)
        {
            return base.Channel.GetIfFileNameOfSeasonProfileIsRecognisedAsync(profileFileNameFragment);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSeasonProfileAsync(string profileFileNameFragment)
        {
            return base.Channel.GetSeasonProfileAsync(profileFileNameFragment);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAllSeasonProfilesAsync()
        {
            return base.Channel.GetAllSeasonProfilesAsync();
        }
        
        public System.Threading.Tasks.Task<byte[]> PopulateSingleEventWithResultsAsync(byte[] eventItemAsJsonAsCompressedBytes)
        {
            return base.Channel.PopulateSingleEventWithResultsAsync(eventItemAsJsonAsCompressedBytes);
        }
        
        public System.Threading.Tasks.Task<byte[]> PopulateAllEventsInSingleSeriesWithAllResultsAsync(byte[] seriesItemAsJsonAsCompressedBytes)
        {
            return base.Channel.PopulateAllEventsInSingleSeriesWithAllResultsAsync(seriesItemAsJsonAsCompressedBytes);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MyHttpTextBinding_ILeaderboardResultsSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsTextBinding_ILeaderboardResultsSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsCustomBinaryBinding_ILeaderboardResultsSvc))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                result.Elements.Add(new System.ServiceModel.Channels.BinaryMessageEncodingBindingElement());
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MyHttpTextBinding_ILeaderboardResultsSvc))
            {
                return new System.ServiceModel.EndpointAddress("http://rezultzsvccorewcf.azurewebsites.net/ILeaderboardResultsSvc/HttpText");
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsTextBinding_ILeaderboardResultsSvc))
            {
                return new System.ServiceModel.EndpointAddress("https://rezultzsvccorewcf.azurewebsites.net/ILeaderboardResultsSvc/HttpsText");
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsCustomBinaryBinding_ILeaderboardResultsSvc))
            {
                return new System.ServiceModel.EndpointAddress("https://rezultzsvccorewcf.azurewebsites.net/ILeaderboardResultsSvc/HttpsBinary");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            MyHttpTextBinding_ILeaderboardResultsSvc,
            
            MyHttpsTextBinding_ILeaderboardResultsSvc,
            
            MyHttpsCustomBinaryBinding_ILeaderboardResultsSvc,
        }
    }
}
