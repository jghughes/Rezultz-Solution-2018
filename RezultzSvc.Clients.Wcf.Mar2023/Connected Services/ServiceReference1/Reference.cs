//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
    public partial class JghFault : object
    {
        
        private string NarrativeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Narrative
        {
            get
            {
                return this.NarrativeField;
            }
            set
            {
                this.NarrativeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:wsdlnamespace.RezultzSvc.WebApp01", ConfigurationName="ServiceReference1.IAzureStorageSvc")]
    public interface IAzureStorageSvc
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfServiceIsAnswering", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfServiceIsAnsweringRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfServiceIsAnsweringJgh" +
            "FaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> GetIfServiceIsAnsweringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetServiceEndpointsInfo", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetServiceEndpointsInfoRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetServiceEndpointsInfoJgh" +
            "FaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<string[]> GetServiceEndpointsInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfContainerExists", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfContainerExistsRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfContainerExistsJghFau" +
            "ltFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> GetIfContainerExistsAsync(string accountName, string containerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetNamesOfBlobsInContainer" +
            "", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetNamesOfBlobsInContainer" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetNamesOfBlobsInContainer" +
            "JghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<string[]> GetNamesOfBlobsInContainerAsync(string accountName, string containerName, string contains, bool mustPrintDescriptionAsOpposedToBlobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfBlobExists", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfBlobExistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetIfBlobExistsJghFaultFau" +
            "lt", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> GetIfBlobExistsAsync(string accountName, string containerName, string blobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetAbsoluteUriOfBlockBlob", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetAbsoluteUriOfBlockBlobR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/GetAbsoluteUriOfBlockBlobJ" +
            "ghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<string> GetAbsoluteUriOfBlockBlobAsync(string accountName, string containerName, string blobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/DeleteBlockBlobIfExistsAsy" +
            "nc", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/DeleteBlockBlobIfExistsAsy" +
            "ncResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/DeleteBlockBlobIfExistsAsy" +
            "ncJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> DeleteBlockBlobIfExistsAsyncAsync(string accountName, string containerName, string blobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/UploadStringToBlockBlob", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/UploadStringToBlockBlobRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/UploadStringToBlockBlobJgh" +
            "FaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> UploadStringToBlockBlobAsync(string accountName, string containerName, string blobName, bool createContainerIfNotExists, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/UploadBytesToBlockBlob", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/UploadBytesToBlockBlobResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/UploadBytesToBlockBlobJghF" +
            "aultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<bool> UploadBytesToBlockBlobAsync(string accountName, string containerName, string blobName, bool createContainerIfNotExists, byte[] content);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/DownloadBlockBlob", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/DownloadBlockBlobResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference1.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp01/IAzureStorageSvc/DownloadBlockBlobJghFaultF" +
            "ault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp01")]
        System.Threading.Tasks.Task<byte[]> DownloadBlockBlobAsync(string accountName, string containerName, string blobName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IAzureStorageSvcChannel : ServiceReference1.IAzureStorageSvc, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AzureStorageSvcClient : System.ServiceModel.ClientBase<ServiceReference1.IAzureStorageSvc>, ServiceReference1.IAzureStorageSvc
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AzureStorageSvcClient(EndpointConfiguration endpointConfiguration) : 
                base(AzureStorageSvcClient.GetBindingForEndpoint(endpointConfiguration), AzureStorageSvcClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AzureStorageSvcClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AzureStorageSvcClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AzureStorageSvcClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AzureStorageSvcClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AzureStorageSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> GetIfServiceIsAnsweringAsync()
        {
            return base.Channel.GetIfServiceIsAnsweringAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetServiceEndpointsInfoAsync()
        {
            return base.Channel.GetServiceEndpointsInfoAsync();
        }
        
        public System.Threading.Tasks.Task<bool> GetIfContainerExistsAsync(string accountName, string containerName)
        {
            return base.Channel.GetIfContainerExistsAsync(accountName, containerName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNamesOfBlobsInContainerAsync(string accountName, string containerName, string contains, bool mustPrintDescriptionAsOpposedToBlobName)
        {
            return base.Channel.GetNamesOfBlobsInContainerAsync(accountName, containerName, contains, mustPrintDescriptionAsOpposedToBlobName);
        }
        
        public System.Threading.Tasks.Task<bool> GetIfBlobExistsAsync(string accountName, string containerName, string blobName)
        {
            return base.Channel.GetIfBlobExistsAsync(accountName, containerName, blobName);
        }
        
        public System.Threading.Tasks.Task<string> GetAbsoluteUriOfBlockBlobAsync(string accountName, string containerName, string blobName)
        {
            return base.Channel.GetAbsoluteUriOfBlockBlobAsync(accountName, containerName, blobName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBlockBlobIfExistsAsyncAsync(string accountName, string containerName, string blobName)
        {
            return base.Channel.DeleteBlockBlobIfExistsAsyncAsync(accountName, containerName, blobName);
        }
        
        public System.Threading.Tasks.Task<bool> UploadStringToBlockBlobAsync(string accountName, string containerName, string blobName, bool createContainerIfNotExists, string content)
        {
            return base.Channel.UploadStringToBlockBlobAsync(accountName, containerName, blobName, createContainerIfNotExists, content);
        }
        
        public System.Threading.Tasks.Task<bool> UploadBytesToBlockBlobAsync(string accountName, string containerName, string blobName, bool createContainerIfNotExists, byte[] content)
        {
            return base.Channel.UploadBytesToBlockBlobAsync(accountName, containerName, blobName, createContainerIfNotExists, content);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadBlockBlobAsync(string accountName, string containerName, string blobName)
        {
            return base.Channel.DownloadBlockBlobAsync(accountName, containerName, blobName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MyHttpTextBinding_IAzureStorageSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsTextBinding_IAzureStorageSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsCustomBinaryBinding_IAzureStorageSvc))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                result.Elements.Add(new System.ServiceModel.Channels.BinaryMessageEncodingBindingElement());
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MyHttpTextBinding_IAzureStorageSvc))
            {
                return new System.ServiceModel.EndpointAddress("http://rezultzsvccorewcf.azurewebsites.net/IAzureStorageSvc/HttpText");
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsTextBinding_IAzureStorageSvc))
            {
                return new System.ServiceModel.EndpointAddress("https://rezultzsvccorewcf.azurewebsites.net/IAzureStorageSvc/HttpsText");
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsCustomBinaryBinding_IAzureStorageSvc))
            {
                return new System.ServiceModel.EndpointAddress("https://rezultzsvccorewcf.azurewebsites.net/IAzureStorageSvc/HttpsBinary");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            MyHttpTextBinding_IAzureStorageSvc,
            
            MyHttpsTextBinding_IAzureStorageSvc,
            
            MyHttpsCustomBinaryBinding_IAzureStorageSvc,
        }
    }
}
