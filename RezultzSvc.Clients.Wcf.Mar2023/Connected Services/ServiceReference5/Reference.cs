//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference5
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
    public partial class JghFault : object
    {
        
        private string NarrativeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Narrative
        {
            get
            {
                return this.NarrativeField;
            }
            set
            {
                this.NarrativeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:wsdlnamespace.RezultzSvc.WebApp03", ConfigurationName="ServiceReference5.IRaceResultsPublishingSvc")]
    public interface IRaceResultsPublishingSvc
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIfServiceIsAns" +
            "wering", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIfServiceIsAns" +
            "weringResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIfServiceIsAns" +
            "weringJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<bool> GetIfServiceIsAnsweringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetServiceEndpoin" +
            "tsInfo", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetServiceEndpoin" +
            "tsInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetServiceEndpoin" +
            "tsInfoJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<string[]> GetServiceEndpointsInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIfFileNameFrag" +
            "mentOfPublishingProfileIsRecognised", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIfFileNameFrag" +
            "mentOfPublishingProfileIsRecognisedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIfFileNameFrag" +
            "mentOfPublishingProfileIsRecognisedJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<bool> GetIfFileNameFragmentOfPublishingProfileIsRecognisedAsync(string fileNameFragment);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetPublishingProf" +
            "ile", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetPublishingProf" +
            "ileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetPublishingProf" +
            "ileJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<string> GetPublishingProfileAsync(string fileNameFragment);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetFileNameFragme" +
            "ntsOfAllPublishingProfiles", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetFileNameFragme" +
            "ntsOfAllPublishingProfilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetFileNameFragme" +
            "ntsOfAllPublishingProfilesJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<string[]> GetFileNameFragmentsOfAllPublishingProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIllustrativeEx" +
            "ampleOfDatasetExpectedForProcessing", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIllustrativeEx" +
            "ampleOfDatasetExpectedForProcessingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetIllustrativeEx" +
            "ampleOfDatasetExpectedForProcessingJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<string> GetIllustrativeExampleOfDatasetExpectedForProcessingAsync(string fileNameWithExtension);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/UploadDatasetToBe" +
            "ProcessedSubsequently", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/UploadDatasetToBe" +
            "ProcessedSubsequentlyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/UploadDatasetToBe" +
            "ProcessedSubsequentlyJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<bool> UploadDatasetToBeProcessedSubsequentlyAsync(string identifierOfDataset, string accountName, string containerName, string fileName, string datasetAsRawString);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetResultsForSing" +
            "leEventProcessedFromPreviouslyUploadedDatasets", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetResultsForSing" +
            "leEventProcessedFromPreviouslyUploadedDatasetsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/GetResultsForSing" +
            "leEventProcessedFromPreviouslyUploadedDatasetsJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<string> GetResultsForSingleEventProcessedFromPreviouslyUploadedDatasetsAsync(string publisherInputDtoAsJson);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/UploadFileOfCompl" +
            "etedResultsForSingleEvent", ReplyAction="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/UploadFileOfCompl" +
            "etedResultsForSingleEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceReference5.JghFault), Action="urn:wsdlnamespace.RezultzSvc.WebApp03/IRaceResultsPublishingSvc/UploadFileOfCompl" +
            "etedResultsForSingleEventJghFaultFault", Name="JghFault", Namespace="http://schemas.datacontract.org/2004/07/RezultzSvc.WebApp03")]
        System.Threading.Tasks.Task<bool> UploadFileOfCompletedResultsForSingleEventAsync(string accountName, string containerName, string fileName, string completedResultsAsXml);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IRaceResultsPublishingSvcChannel : ServiceReference5.IRaceResultsPublishingSvc, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class RaceResultsPublishingSvcClient : System.ServiceModel.ClientBase<ServiceReference5.IRaceResultsPublishingSvc>, ServiceReference5.IRaceResultsPublishingSvc
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RaceResultsPublishingSvcClient(EndpointConfiguration endpointConfiguration) : 
                base(RaceResultsPublishingSvcClient.GetBindingForEndpoint(endpointConfiguration), RaceResultsPublishingSvcClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RaceResultsPublishingSvcClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RaceResultsPublishingSvcClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RaceResultsPublishingSvcClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RaceResultsPublishingSvcClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RaceResultsPublishingSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> GetIfServiceIsAnsweringAsync()
        {
            return base.Channel.GetIfServiceIsAnsweringAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetServiceEndpointsInfoAsync()
        {
            return base.Channel.GetServiceEndpointsInfoAsync();
        }
        
        public System.Threading.Tasks.Task<bool> GetIfFileNameFragmentOfPublishingProfileIsRecognisedAsync(string fileNameFragment)
        {
            return base.Channel.GetIfFileNameFragmentOfPublishingProfileIsRecognisedAsync(fileNameFragment);
        }
        
        public System.Threading.Tasks.Task<string> GetPublishingProfileAsync(string fileNameFragment)
        {
            return base.Channel.GetPublishingProfileAsync(fileNameFragment);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFileNameFragmentsOfAllPublishingProfilesAsync()
        {
            return base.Channel.GetFileNameFragmentsOfAllPublishingProfilesAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetIllustrativeExampleOfDatasetExpectedForProcessingAsync(string fileNameWithExtension)
        {
            return base.Channel.GetIllustrativeExampleOfDatasetExpectedForProcessingAsync(fileNameWithExtension);
        }
        
        public System.Threading.Tasks.Task<bool> UploadDatasetToBeProcessedSubsequentlyAsync(string identifierOfDataset, string accountName, string containerName, string fileName, string datasetAsRawString)
        {
            return base.Channel.UploadDatasetToBeProcessedSubsequentlyAsync(identifierOfDataset, accountName, containerName, fileName, datasetAsRawString);
        }
        
        public System.Threading.Tasks.Task<string> GetResultsForSingleEventProcessedFromPreviouslyUploadedDatasetsAsync(string publisherInputDtoAsJson)
        {
            return base.Channel.GetResultsForSingleEventProcessedFromPreviouslyUploadedDatasetsAsync(publisherInputDtoAsJson);
        }
        
        public System.Threading.Tasks.Task<bool> UploadFileOfCompletedResultsForSingleEventAsync(string accountName, string containerName, string fileName, string completedResultsAsXml)
        {
            return base.Channel.UploadFileOfCompletedResultsForSingleEventAsync(accountName, containerName, fileName, completedResultsAsXml);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MyHttpTextBinding_IRaceResultsPublishingSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsTextBinding_IRaceResultsPublishingSvc))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsCustomBinaryBinding_IRaceResultsPublishingSvc))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                result.Elements.Add(new System.ServiceModel.Channels.BinaryMessageEncodingBindingElement());
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MyHttpTextBinding_IRaceResultsPublishingSvc))
            {
                return new System.ServiceModel.EndpointAddress("http://rezultzsvccorewcf11.azurewebsites.net/IRaceResultsPublishingSvc/HttpText");
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsTextBinding_IRaceResultsPublishingSvc))
            {
                return new System.ServiceModel.EndpointAddress("https://rezultzsvccorewcf11.azurewebsites.net/IRaceResultsPublishingSvc/HttpsText" +
                        "");
            }
            if ((endpointConfiguration == EndpointConfiguration.MyHttpsCustomBinaryBinding_IRaceResultsPublishingSvc))
            {
                return new System.ServiceModel.EndpointAddress("https://rezultzsvccorewcf11.azurewebsites.net/IRaceResultsPublishingSvc/HttpsBina" +
                        "ry");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            MyHttpTextBinding_IRaceResultsPublishingSvc,
            
            MyHttpsTextBinding_IRaceResultsPublishingSvc,
            
            MyHttpsCustomBinaryBinding_IRaceResultsPublishingSvc,
        }
    }
}
