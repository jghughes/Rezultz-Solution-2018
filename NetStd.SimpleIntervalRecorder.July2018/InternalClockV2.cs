using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace NetStd.SimpleIntervalRecorder.July2018
{
    public class InternalClockV2 : IInternalClock
    {
        #region ctors

        public InternalClockV2()
        {
            NanosecPerTick = 100;

            _internalStopwatch = new Stopwatch();

            _internalStopwatch.Start();

            _startPointInTimeTicks = _internalStopwatch.ElapsedTicks; // this should be zero!!
        }

        #endregion

        #region fields

        private readonly Stopwatch _internalStopwatch;
        private readonly long _startPointInTimeTicks;

        #endregion

        #region props

        public double NanosecPerTick { get; }
        public long TimeNowTicks => _internalStopwatch.ElapsedTicks - _startPointInTimeTicks;

        #endregion

        #region methods

        // ReSharper disable once UnusedMember.Local
        public string MeasureReportedAccuracy()
        {
            var sb = new StringBuilder();

            sb.AppendLine("Timestamps are being generated by the StopWatch class in System.Diagnostics.");

            var listOfDeltaTicks = new List<long>();

            const int numOfIterations = 100000;

            var myStopwatch = new Stopwatch();

            myStopwatch.Start();

            for (var i = 0; i < numOfIterations; i++)
            {
                var ticks1 = myStopwatch.ElapsedTicks;
                var ticks2 = myStopwatch.ElapsedTicks;
                var latency = ticks1 - ticks2; //miniscule but measurable
                listOfDeltaTicks.Add(Math.Abs(latency));
            }

            myStopwatch.Reset();

            var deltaMaxMillisec = listOfDeltaTicks.Max(z => z) * NanosecPerTick / 10e6;


            sb.AppendLine(
                $"Tested here and now the worst reported delta in many, many trials between successive ticks of the instance of the StopWatch is {deltaMaxMillisec:n2}ms.");
            sb.AppendLine(
                $"For 99% accuracy any single measured interval should therefore exceed {(deltaMaxMillisec * 100):n0}ms.");
            sb.AppendLine("However because deltas occur sporadically, their average diminishes with the number of iterations performed.");
            sb.AppendLine("With more than 100 iterations performed in any test protocol they diminish to the point of irrelevancy.");

            return sb.ToString();
        }

        #endregion

    }
}